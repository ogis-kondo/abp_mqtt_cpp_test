# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

strategy:
  matrix:
    TestGroup1TlsWs:
      MQTT_NO_TLS: OFF
      MQTT_USE_WS: ON
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: ON
      MQTT_TEST_2: OFF
      MQTT_TEST_3: OFF
      BUILD_EXAMPLES: OFF       
    TestGroup2TlsWs:
      MQTT_NO_TLS: ON
      MQTT_USE_WS: ON
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: ON
      MQTT_TEST_3: OFF
      BUILD_EXAMPLES: OFF       
    TestGroup3TlsWs:
      MQTT_NO_TLS: OFF
      MQTT_USE_WS: OFF
      MQTT_USE_STR_CHECK: ON
      MQTT_TEST_1: OFF
      MQTT_TEST_2: OFF
      MQTT_TEST_3: ON
      BUILD_EXAMPLES: OFF       

pool:
  vmImage: 'vs2017-win2016'

steps:

# https://github.com/Azure/azure-storage-cpplite  
- script: |
    git clone https://github.com/curl/curl.git -b curl-7_65_0 
    git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1b
    .\curl\projects\build-openssl.bat vc14.1 x86 debug .\openssl\ -perlpath C:\Strawberry
  displayName: 'install openssl'

- script: |
    git submodule update --init --recursive
    mkdir build
    cd build
    set PATH=D:/a/1/s/openssl/;%PATH%
    cmake -DMQTT_NO_TLS=%MQTT_NO_TLS% -DMQTT_USE_WS=%MQTT_USE_WS% -DMQTT_USE_STR_CHECK=%MQTT_USE_STR_CHECK% -DMQTT_TEST_1=%MQTT_TEST_1% -DMQTT_TEST_2=%MQTT_TEST_2% -DMQTT_TEST_3=%MQTT_TEST_3% -DBUILD_EXAMPLES=%BUILD_EXAMPLES% -DOPENSSL_ROOT_DIR="./openssl/" ..
    cmake --build . --config Release
    cd test
    set PATH=%BOOST_ROOT%\lib;%PATH%
    ctest -VV
  displayName: 'cmake test'
